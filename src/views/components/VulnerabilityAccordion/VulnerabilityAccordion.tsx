import React, { useState, useEffect, useCallback } from 'react';
import { useVulnerabilities, Vulnerability, SCAVulnerability, FileGroup, PackageGroup } from '../../context/VulnerabilitiesContext';
import VulnerabilityItem from '../VulnerabilityItem/VulnerabilityItem';
import SCAVulnerabilityItem from '../SCAVulnerabilityItem/SCAVulnerabilityItem';
import './VulnerabilityAccordion.css';

interface VulnerabilityAccordionProps {
  fileGroups?: FileGroup[];
  packageGroups?: PackageGroup[];
  vulnerabilities?: Vulnerability[];
  scaVulnerabilities?: SCAVulnerability[];
  type: 'code' | 'sca';
}

const collapseFilePath = (filePath: string, maxLength: number = 50) => {
  if (filePath.length <= maxLength) {
    return filePath;
  }
  let parts = filePath.split('/');
  const lastPart = parts[parts.length - 1];
  parts = parts.slice(1, parts.length - 1);
  while (parts.length > 0 && [...parts, lastPart].join('/').length > maxLength) {
    parts = parts.slice(1);
  }
  return ["...", ...parts, lastPart].join('/');
}

const calculateMaxCharsAllowed = () => {
  const width = document.body.clientWidth;
  const charWidth = 7.5;
  const widthForOtherStuff = 250;
  return Math.max(Math.floor((width - widthForOtherStuff) / charWidth), 30);
}

const trancateGroupsPaths = (groups: FileGroup[]): { [key: string]: string } => {
  const maxCharsAllowed = calculateMaxCharsAllowed();
  const trancationMap = {};
  groups.forEach(group => {
    trancationMap[group.path] = collapseFilePath(group.path, maxCharsAllowed);
  });
  return trancationMap;
}

const EMPTY_FILE_GROUPS: FileGroup[] = [];
const EMPTY_PACKAGE_GROUPS: PackageGroup[] = [];

const VulnerabilityAccordion: React.FC<VulnerabilityAccordionProps> = ({
  fileGroups,
  packageGroups,
  type
}) => {
  const [groups, setGroups] = useState<FileGroup[] | PackageGroup[]>([]);
  const [groupPathTruncated, setGroupPathTruncated] = useState<{ [key: string]: string }>({});
  const selectedPropGroups: FileGroup[] | PackageGroup[] =
    type === 'code'
      ? (fileGroups ?? EMPTY_FILE_GROUPS)
      : (packageGroups ?? EMPTY_PACKAGE_GROUPS);
  useEffect(() => {
    let selectedGroups: FileGroup[] | PackageGroup[] = [];
    if (type === 'code') {
      selectedGroups = selectedPropGroups as FileGroup[];
      setGroupPathTruncated(trancateGroupsPaths(selectedGroups as FileGroup[]));
    } else {
      selectedGroups = selectedPropGroups as PackageGroup[];
    }
    setGroups(selectedGroups);
  }, [selectedPropGroups, type]);
  
  const handleResize = useCallback((type: 'code' | 'sca', groups: FileGroup[] | PackageGroup[]) => {
    if (window["pathTruncationTimeout"]) {
      clearTimeout(window["pathTruncationTimeout"]);
    }
    window["pathTruncationTimeout"] = setTimeout(() => {
      if (type === 'code') {
        setGroupPathTruncated(trancateGroupsPaths(groups as FileGroup[]));
      }
      window["pathTruncationTimeout"] = null;
    }, 100);
  }, [type]);

  useEffect(() => {
    const windowHandler = () => handleResize(type, groups);
    window.addEventListener('resize', windowHandler);
    windowHandler();
    return () => {
      window.removeEventListener('resize', windowHandler);
    };
  }, [handleResize, type, groups]);



  if (groups.length === 0) {
    return null;
  }

  return (
    <div className={`accordion ${type}-accordion`} id={`accordion-${type}`}>
      {groups.map((group, index) => {
        const accordionId = `accordion-${type}-${index}`;
        const headingId = `heading-${type}-${index}`;
        const collapseId = `collapse-${type}-${index}`;
        const isFirstItem = index === 0;
        
        return (
          <div key={index} className="accordion-item">
            <h2 className="accordion-header" id={headingId}>
              <button
                className={`accordion-button ${!isFirstItem ? 'collapsed' : ''}`}
                type="button"
                data-bs-toggle="collapse"
                data-bs-target={`#${collapseId}`}
                aria-expanded={isFirstItem}
                aria-controls={collapseId}
              >
                <div className={type === 'code' ? 'file-path' : 'package-name'}>
                  <i className={`fas ${type === 'code' ? 'fa-file-code file-icon' : 'fa-cube package-icon'}`}></i>
                  <span className="truncate-on-narrow-screens">{type === 'code' ? groupPathTruncated[group.path] : (group as PackageGroup).name}</span>
                  <span className="count-badge">{group.vulnerabilities.length}</span>
                </div>
              </button>
            </h2>
            <div 
              id={collapseId}
              className={`accordion-collapse collapse ${isFirstItem ? 'show' : ''}`}
              aria-labelledby={headingId}
              data-bs-parent={`#accordion-${type}`}
            >
              <div className="accordion-body">
                {group.vulnerabilities.map((vuln, vulnIndex) => (
                  type === 'code' ? (
                    <VulnerabilityItem
                      key={vuln.id}
                      vulnerability={vuln as Vulnerability}
                      isLast={vulnIndex === group.vulnerabilities.length - 1}
                    />
                  ) : (
                    <SCAVulnerabilityItem
                      key={vuln.id}
                      vulnerability={vuln as SCAVulnerability}
                      isLast={vulnIndex === group.vulnerabilities.length - 1}
                    />
                  )
                ))}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default VulnerabilityAccordion;
