import React, { useState, useEffect } from 'react';
import { useVulnerabilities, Vulnerability, SCAVulnerability, FileGroup, PackageGroup } from '../../context/VulnerabilitiesContext';
import VulnerabilityItem from '../VulnerabilityItem/VulnerabilityItem';
import SCAVulnerabilityItem from '../SCAVulnerabilityItem/SCAVulnerabilityItem';
import './VulnerabilityAccordion.css';

interface VulnerabilityAccordionProps {
  fileGroups?: FileGroup[];
  packageGroups?: PackageGroup[];
  vulnerabilities?: Vulnerability[];
  scaVulnerabilities?: SCAVulnerability[];
  type: 'code' | 'sca';
}

const VulnerabilityAccordion: React.FC<VulnerabilityAccordionProps> = ({
  fileGroups = [],
  packageGroups = [],
  vulnerabilities = [],
  scaVulnerabilities = [],
  type
}) => {
  const [expandedItems, setExpandedItems] = useState<Set<number>>(new Set());

  const groups = type === 'code' ? fileGroups : packageGroups;

  // Auto-expand first accordion item if only one group
  useEffect(() => {
    if (groups.length === 1) {
      setExpandedItems(new Set([0]));
    }
  }, [groups]);

  const toggleItem = (index: number) => {
    const newExpanded = new Set(expandedItems);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedItems(newExpanded);
  };

  if (groups.length === 0) {
    return null;
  }

  return (
    <div className={`accordion ${type}-accordion`}>
      {groups.map((group, index) => (
        <div key={index} className="accordion-item">
          <h2 className="accordion-header">
            <button
              className={`accordion-button ${!expandedItems.has(index) ? 'collapsed' : ''}`}
              type="button"
              onClick={() => toggleItem(index)}
              aria-expanded={expandedItems.has(index)}
            >
              <div className={type === 'code' ? 'file-path' : 'package-name'}>
                <i className={`fas ${type === 'code' ? 'fa-file-code file-icon' : 'fa-cube package-icon'}`}></i>
                <span>{type === 'code' ? (group as FileGroup).path : (group as PackageGroup).name}</span>
                <span className="count-badge">{group.vulnerabilities.length}</span>
              </div>
            </button>
          </h2>
          <div className={`accordion-collapse ${expandedItems.has(index) ? 'show' : 'collapse'}`}>
            <div className="accordion-body">
              {group.vulnerabilities.map((vuln, vulnIndex) => (
                type === 'code' ? (
                  <VulnerabilityItem
                    key={vuln.id}
                    vulnerability={vuln as Vulnerability}
                    isLast={vulnIndex === group.vulnerabilities.length - 1}
                  />
                ) : (
                  <SCAVulnerabilityItem
                    key={vuln.id}
                    vulnerability={vuln as SCAVulnerability}
                    isLast={vulnIndex === group.vulnerabilities.length - 1}
                  />
                )
              ))}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default VulnerabilityAccordion;
