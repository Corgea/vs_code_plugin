import * as vscode from "vscode";
import * as path from "path";
import { applyPatch } from "diff";
import ContextManager from "../utils/contextManager";
import { OnCommand } from "../utils/commandsManager";
import APIManager from "../utils/apiManager";
import StorageManager, { StorageKeys } from "../utils/storageManager";
import ViewsManager, { Views } from "../utils/ViewsManager";
import Vulnerability from "../types/vulnerability";

export default class vulnerabilityService {
  @OnCommand("corgea.applyDiff")
  public static async applyVulnerabilityFix(
    fileUri: vscode.Uri,
    fixDiff: string,
  ) {
    const document = await vscode.workspace.openTextDocument(fileUri);
    const currentContent = document.getText();
    const newContent = applyPatch(currentContent, fixDiff);

    if (newContent === false) {
      vscode.window.showErrorMessage(
        "The diff couldn't be applied. This is likely due to your code being modified since the fix was generated. Please refresh the vulnerabilities and try again.",
      );
      return;
    }

    const lineNum = parseInt(fileUri.fragment.replace("L", ""));
    const linePos = new vscode.Position(lineNum, 0);
    const range = new vscode.Range(linePos, linePos);
    const editor = await vscode.window.showTextDocument(document, {
      selection: range,
    });

    await editor.edit((editBuilder) => {
      const entireRange = new vscode.Range(
        document.positionAt(0),
        document.positionAt(currentContent.length),
      );
      editBuilder.replace(entireRange, newContent);
    });

    vscode.window.showInformationMessage(
      "Fix applied successfully. Save the file to reflect the changes.",
    );
  }

  @OnCommand("vulnerabilities.showDetails")
  public static async showVulnerabilityDetails(vulnerability: any) {
    /* panels map need to be moved to util class if we needed to use it in multiple places */
    const panels = new Map<string, vscode.WebviewPanel>();
    const fileName = path.basename(vulnerability.file_path);
    const panelId = `Corgea: ${fileName}:${vulnerability.line_num}`;
    let panel = panels.get(panelId);
    if (panel) {
      panel.reveal(vscode.ViewColumn.One);
    } else {
      panel = vscode.window.createWebviewPanel(
        "vulnerabilityDetails",
        panelId,
        vscode.ViewColumn.One,
        {
          enableScripts: true,
          retainContextWhenHidden: true,
          enableCommandUris: true,
          localResourceRoots: [
            vscode.Uri.file(
              path.join(ContextManager.getContext().extensionPath, "assets"),
            ),
            vscode.Uri.file(
              path.join(ContextManager.getContext().extensionPath, "images"),
            ),
          ],
        },
      );
      panels.set(panelId, panel);
      panel.onDidDispose(() => {
        panels.delete(panelId);
      });
    }
    panel.webview.onDidReceiveMessage(
      (message) => {
        switch (message.command) {
          case "applyDiff":
            const uri = vscode.Uri.parse(message.fileUri);
            vscode.commands.executeCommand(
              "corgea.applyDiff",
              uri,
              message.diff,
            );
            break;
        }
      },
      undefined,
      ContextManager.getContext().subscriptions,
    );

    try {
      const data = await APIManager.getVulnerabilityDetails(vulnerability.id);
      if (data && data.status === "ok") {
        // preparing the data to render the view
        const corgeaUrl = await StorageManager.getValue(StorageKeys.corgeaUrl);
        const styleURI = panel.webview.asWebviewUri(
          vscode.Uri.joinPath(
            ContextManager.getContext().extensionUri,
            "assets",
            "main.css",
          ),
        );
        const fullPath = vscode.Uri.file(
          path.join(
            vscode.workspace.workspaceFolders?.[0]?.uri?.fsPath ?? "",
            data.issue.file_path,
          ),
        );
        const fileUri = vscode.Uri.parse(
          fullPath.with({ fragment: `L${data.issue.line_num}` }).toString(),
        );

        const CorgeaUri = {
          scheme: corgeaUrl ? new URL(corgeaUrl).protocol.replace(":", "") : "",
          path: "/issue/" + data.issue.id,
          authority: corgeaUrl ? corgeaUrl.replace(/^(https?:\/\/)/, "") : "",
        };

        const corgeaURI = encodeURIComponent(JSON.stringify(CorgeaUri));

        const diffString = data.fix?.diff;

        const logoPath = vscode.Uri.joinPath(
          ContextManager.getContext().extensionUri,
          "images",
          "logo.png",
        );

        const logoURI = panel.webview.asWebviewUri(logoPath);

        panel.webview.html = ViewsManager.render(Views.VulnerabilityDetails, {
          styleURI: styleURI.toString(),
          logoURI: logoURI.toString(),
          fileURI: fileUri,
          corgeaURI,
          cspSource: panel.webview.cspSource,
          vulnerability: data,
          diffString,
        });
      } else {
        panel.webview.html = ViewsManager.render(Views.GenericError, {
          message: "Could not load vulnerability details.",
        });
      }
    } catch (error) {
      if (
        (error as any).response &&
        (error as any).response.status >= 400 &&
        (error as any).response.status < 500
      ) {
        panel.webview.html = ViewsManager.render(Views.GenericError, {
          message: "Client error occurred while loading vulnerability details.",
        });
      } else {
        panel.webview.html = ViewsManager.render(Views.GenericError, {
          message: "Could not load vulnerability details.",
        });
      }
    }
  }

  public static activate() {}
}
